#!/usr/bin/env python

#########################################################################
# A provisional routine for actually producing and returning data cubes.
#########################################################################

from __future__ import print_function

from future import standard_library
standard_library.install_aliases()

from builtins import range
import os
import configparser
import glob
import multiprocessing
import re
import sys
import time

import numpy as np

from charis import extractcube


if __name__ == "__main__":

    if len(sys.argv) < 3:
        errstring = "Must call extractcube.py with at least two arguments:\n"
        errstring += "1: string(s) parsed by glob matching files to be turned into data cubes\n"
        errstring += "2: a .ini configuration file processed by ConfigParser"
        print(errstring)
        exit()

    filenames = []
    for i in range(1, len(sys.argv) - 1):
        filenames += glob.glob(sys.argv[i])

    if len(filenames) == 0:
        raise ValueError("No matching CHARIS files found by extractcube.")

    Config = configparser.ConfigParser()
    Config.read(sys.argv[len(sys.argv) - 1])

    read_0 = Config.getint('Ramp', 'read_0')
    try:
        read_1 = Config.getint('Ramp', 'read_f')
    except:
        read_1 = None
    read_idx = [read_0, read_1]
    try:
        gain = Config.getfloat('Ramp', 'gain')
    except:
        gain = 2
    try:
        noisefac = Config.getfloat('Ramp', 'noisefac')
    except:
        noisefac = 0

    saveramp = Config.getboolean('Ramp', 'saveramp')
    bgsub = Config.getboolean('Calib', 'bgsub')
    mask = Config.getboolean('Calib', 'mask')
    try:
        flatfield = Config.getboolean('Calib', 'flatfield')
    except:
        flatfield = True
    try:
        fitshift = Config.getboolean('Calib', 'fitshift')
    except:
        fitshift = True

    calibdir = Config.get('Calib', 'calibdir')
    R = Config.getint('Extract', 'R')
    method = Config.get('Extract', 'method')
    try:
        refine = Config.getboolean('Extract', 'refine')
    except:
        refine = True
    try:
        crosstalk_scale = Config.getfloat('Extract', 'crosstalkscale')
    except:
        crosstalk_scale = 0.8
    try:
        dc_xtalk_correction = Config.getboolean('Extract', 'dcxtalkcorrection')
    except:
        dc_xtalk_correction = False
    try:
        suppressrn = Config.getboolean('Extract', 'suppressrn')
    except:
        suppressrn = True
    try:
        minpct = Config.getint('Extract', 'minpct')
        minpct = max(minpct, 0)
        minpct = min(minpct, 90)  # Don't allow more than 90% of the pixels to be used in estimating the read noise.
    except:
        minpct = 60
    try:
        fitbkgnd = Config.getboolean('Extract', 'fitbkgnd')
    except:
        fitbkgnd = True
    try:
        saveresid = Config.getboolean('Extract', 'saveresid')
    except:
        saveresid = False

    ################################################################
    # Maximum threads must be between 1 and cpu_count, inclusive
    ################################################################

    try:
        maxcpus = Config.getint('Extract', 'maxcpus')
        if maxcpus <= 0:
            maxcpus = multiprocessing.cpu_count() + maxcpus
        maxcpus = min(maxcpus, multiprocessing.cpu_count())
        maxcpus = max(maxcpus, 1)
    except:
        maxcpus = multiprocessing.cpu_count()

    try:
        smoothandmask = Config.getboolean('Extract', 'smoothandmask')
    except:
        smoothandmask = True

    for filename in filenames:
        _ = extractcube.getcube(
            filename=filename, read_idx=read_idx, bgsub=bgsub,
            bgpath=None,
            mask=mask, gain=gain, noisefac=noisefac,
            saveramp=saveramp, refine=refine,
            crosstalk_scale=crosstalk_scale,
            dc_xtalk_correction=dc_xtalk_correction,
            maxcpus=maxcpus,
            calibdir=calibdir, R=R, method=method,
            smoothandmask=smoothandmask, flatfield=flatfield,
            fitshift=fitshift, suppressrn=suppressrn,
            minpct=minpct, fitbkgnd=fitbkgnd,
            saveresid=saveresid)


    # for filename in filenames:
    #     for read_idx in range(ndit):
    #         _ = extractcube.getcube(
    #             filename=filename, read_idx=read_idx, bgsub=bgsub,
    #             bgpath=None,
    #             mask=mask, gain=gain, noisefac=noisefac,
    #             saveramp=saveramp, refine=refine, maxcpus=maxcpus,
    #             calibdir=calibdir, R=R, method=method,
    #             smoothandmask=smoothandmask, flatfield=flatfield,
    #             fitshift=fitshift, suppressrn=suppressrn,
    #             minpct=minpct, fitbkgnd=fitbkgnd,
    #             saveresid=saveresid)
