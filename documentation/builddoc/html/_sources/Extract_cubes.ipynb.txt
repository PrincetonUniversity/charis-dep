{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Extract cubes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now extract a cube.  First, you need to create an appropriate .ini file by modifying sample.ini in the code directory.  With the example file names given above and with your modified .ini file in the current working directory, you would run:\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "~~~\n",
    "extractcube /path/to/CRSA00000000.fits modified.ini\n",
    "~~~"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The arguments are simply\n",
    "1. The raw file(s) to extract into cubes\n",
    "2. The configuration file\n",
    "The extracted cubes will be written to the current working directory.  The first HDU is simply the header with some basic information, the second HDU is the cube, the third HDU is the inverse variance on the cube, and the fourth HDU has no data but saves the original header on HDU0 of the raw reads.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### .ini file example"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```\n",
    "[Ramp]\n",
    "# First read to use in ramp (first overall read is 1)\n",
    "read_0 : 1\n",
    "# Last read to use, None = use all reads from read_0 onwards\n",
    "read_f : None\n",
    "# Detector gain, used to compute photon noise\n",
    "gain : 2\n",
    "# Fraction of the count rate to add as noise: 0.05, for example,\n",
    "# assumes that there is a systematic 5% error in the count rate at\n",
    "# each pixel from imperfect PSF-let models.  This should give a\n",
    "# reduced chi squared close to 1 if it is being used.  Set to zero to\n",
    "# use simply read noise and photon noise.\n",
    "noisefac : 0.02\n",
    "# Save the ramp and inverse variance as its own file?\n",
    "saveramp : True\n",
    "\n",
    "[Calib]\n",
    "# Location of calibration files\n",
    "calibdir : /path/to/calibration/files\n",
    "# Subtract the background file in calibdir above before extracting a cube?\n",
    "bgsub : False\n",
    "# Mask bad pixels using a mask in calibdir?\n",
    "mask : True\n",
    "# Apply flatfields to correct pixel-to-pixel sensitivity variations\n",
    "# and lenslet-to-lenslet illumination variations?\n",
    "flatfield : True\n",
    "# Fit for position-dependent subpixel shifts in the locations of the\n",
    "# microspectra in individual frames?\n",
    "fitshift : True\n",
    "\n",
    "[Extract]\n",
    "# Spectral resolution for extraction. \n",
    "# Recommended: 30 for lowres, 100 for highres.\n",
    "# PSFlet template files for this resolution must already be in calibdir.\n",
    "R : 30\n",
    "# Method of extraction, lstsq strongly preferred.  Other choice is optext\n",
    "method : lstsq\n",
    "# Iterate one time on the least-squares data cube to remove crosstalk?\n",
    "refine : True\n",
    "# Supress correlated read noise?  Approximately doubles cube extraction \n",
    "# time, but improves read noise by up to a factor of 4.\n",
    "# For science reductions, refine and suppressrn should be True.\n",
    "suppressrn : True\n",
    "# Mask (set ivar = 0) poor spectral measurements, i.e., those with\n",
    "# much worse inverse variances than their average neighbors'?  If\n",
    "# True, the software will replace these intensity measurements with\n",
    "# interpolated values.  As the measurements are masked anwyay (ivar=0)\n",
    "# this is purely cosmetic.\n",
    "smoothandmask : True\n",
    "# Save the residuals of the 2D image as a separate FITS file?  This\n",
    "# keyword does nothing unless method == 'lstsq'\n",
    "saveresid : False\n",
    "# Maximum threads for parallelization.  \n",
    "# Negative: leave that many threads free.  None: use number of cpus.\n",
    "maxcpus : None\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Bash",
   "language": "bash",
   "name": "bash"
  },
  "language_info": {
   "codemirror_mode": "shell",
   "file_extension": ".sh",
   "mimetype": "text/x-sh",
   "name": "bash"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
